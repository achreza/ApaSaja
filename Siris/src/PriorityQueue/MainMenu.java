/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PriorityQueue;

import java.util.Iterator;
import java.util.LinkedList;

/**
 *
 * @author 62852
 */
public class MainMenu extends javax.swing.JFrame {

    /**
     * Creates new form MainMenu
     */
    private final LinkedList readyQueue = new LinkedList();
    private Process runningProcess = null;
    private final LinkedList blockingQueue = new LinkedList();
    private int createdProcesses = 0;
    private int contextSwitches = 0;
    
    public MainMenu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        runningTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        blockingTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        readyTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        addProcessField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        deleteProcessField = new javax.swing.JTextField();
        addProcessButton = new javax.swing.JButton();
        deleteProcessButton = new javax.swing.JButton();
        contextSwitchButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        historyTextArea = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        txtNamaPasien = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        runningTextArea.setColumns(20);
        runningTextArea.setRows(5);
        jScrollPane1.setViewportView(runningTextArea);

        blockingTextArea.setColumns(20);
        blockingTextArea.setRows(5);
        jScrollPane2.setViewportView(blockingTextArea);

        readyTextArea.setColumns(20);
        readyTextArea.setRows(5);
        jScrollPane3.setViewportView(readyTextArea);

        jLabel1.setText("Antrian");

        jLabel2.setText("Sedang Diproses");

        jLabel3.setText("Ditunda");

        jLabel4.setText("Prioritas");

        addProcessField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProcessFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("ID Antrian");

        deleteProcessField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProcessFieldActionPerformed(evt);
            }
        });

        addProcessButton.setText("Tambah Antrian");
        addProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProcessButtonActionPerformed(evt);
            }
        });

        deleteProcessButton.setText("Hapus Antrian");
        deleteProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProcessButtonActionPerformed(evt);
            }
        });

        contextSwitchButton.setText("Lanjut Antrian");
        contextSwitchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contextSwitchButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Log / History :");

        historyTextArea.setColumns(20);
        historyTextArea.setRows(5);
        jScrollPane4.setViewportView(historyTextArea);

        jLabel7.setText("Nama Pasien");

        txtNamaPasien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNamaPasienActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(211, 211, 211))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane3)
                                        .addGap(97, 97, 97))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel7)
                                                    .addComponent(jLabel4))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(addProcessField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtNamaPasien, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(addProcessButton, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(deleteProcessField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(deleteProcessButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(107, 107, 107))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 129, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(692, 692, 692)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(189, 189, 189))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(contextSwitchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(56, 56, 56)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane3)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))))
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(deleteProcessField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(deleteProcessButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(contextSwitchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtNamaPasien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(addProcessField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addComponent(addProcessButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)))
                .addGap(531, 531, 531))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addProcessFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProcessFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_addProcessFieldActionPerformed

    private void deleteProcessFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProcessFieldActionPerformed
        // TODO add your handling code here:
        int deletedProcess = Integer.parseInt(deleteProcessField.getText());
        if(runningProcess != null && runningProcess.getProcessNumber() == deletedProcess){
            runningProcess = null;
            runningTextArea.setText("");
        } else{
            boolean removed = removeFromReadyQueue(deletedProcess);
            if(!removed){
                removeFromBlockingQueue(deletedProcess);
            }
        }
        deleteProcessField.setText("");
        historyTextArea.append("Menghapus Antrian#: " + String.valueOf(deletedProcess) + "\n");
        redrawReadyTextArea();
        redrawBlockingTextArea();
    }//GEN-LAST:event_deleteProcessFieldActionPerformed

    private void addProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProcessButtonActionPerformed
        // TODO add your handling code here:
        createdProcesses++;
        int enteredPriority = Integer.parseInt(addProcessField.getText());
        String nama = txtNamaPasien.getText();
        if(enteredPriority <= 0){
            enteredPriority = 1;
        }
        Process newProcess = new Process(createdProcesses, enteredPriority,nama);
        boolean addedProcess = readyQueue.add(newProcess);
        if (addedProcess){
            readyTextArea.append("Antrian#: " + String.valueOf(newProcess.getProcessNumber()) +" \n| Nama Pasien: " + txtNamaPasien.getText() + " | Prioritas: " + String.valueOf(enteredPriority) + "\n");
        }
        addProcessField.setText("");
        txtNamaPasien.setText("");
        historyTextArea.append("Menambahkan Antrian#: " + String.valueOf(createdProcesses) + " \n| Nama Pasien: " + txtNamaPasien.getText() +" | Prioritas: " + String.valueOf(enteredPriority) + "\n");
    }//GEN-LAST:event_addProcessButtonActionPerformed

    private void contextSwitchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contextSwitchButtonActionPerformed
        // TODO add your handling code here:
         if(runningProcess != null){
            runningProcess.doWork();
            if(runningProcess.getTimeToCompletion() == 0){
                historyTextArea.append("Antrian# " + runningProcess.getProcessNumber() + " Selesai.\n");
                runningProcess = null;
                runningTextArea.setText("");
            }
        }
        if(!readyQueue.isEmpty() || !blockingQueue.isEmpty()){
            updateQueues();
        }
        contextSwitches++;
        updateHistory(contextSwitches);
        redrawReadyTextArea();
        redrawBlockingTextArea();
    }//GEN-LAST:event_contextSwitchButtonActionPerformed

    private void txtNamaPasienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNamaPasienActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNamaPasienActionPerformed

    private void deleteProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProcessButtonActionPerformed
        // TODO add your handling code here:
        int deletedProcess = Integer.parseInt(deleteProcessField.getText());
        if(runningProcess != null && runningProcess.getProcessNumber() == deletedProcess){
            runningProcess = null;
            runningTextArea.setText("");
        } else{
            boolean removed = removeFromReadyQueue(deletedProcess);
            if(!removed){
                removeFromBlockingQueue(deletedProcess);
            }
        }
        deleteProcessField.setText("");
        historyTextArea.append("Deleted P#: " + String.valueOf(deletedProcess) + "\n");
        redrawReadyTextArea();
        redrawBlockingTextArea();
    }//GEN-LAST:event_deleteProcessButtonActionPerformed
    
     private boolean removeFromReadyQueue(int processID){
 
        
        for(Iterator<Process> iterator = readyQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            if(currentProcess.getProcessNumber() == processID){
                iterator.remove();
                return true;
            }
        }
        return false;
    }
    
    private void redrawReadyTextArea(){
        String readyProcesses = "";
        readyTextArea.setText("");
        
        for(Iterator<Process> iterator = readyQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            readyProcesses = readyProcesses.concat("Antrian#: " + String.valueOf(currentProcess.getProcessNumber()) + " \n| Nama Pasien: " + String.valueOf(currentProcess.getNama()) +" | Prioritas: " + String.valueOf(currentProcess.getPriority()) + "\n");
        }
        readyTextArea.setText(readyProcesses);
        
    }
    
    private void removeFromBlockingQueue(int processID){
 
        for(Iterator<Process> iterator = blockingQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            if(currentProcess.getProcessNumber() == processID){
                iterator.remove();
                break;
            }
        }
    }
    
    private void redrawBlockingTextArea(){
        
        String blockingProcesses = "";
        blockingTextArea.setText("");
        for(Iterator<Process> iterator = blockingQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            blockingProcesses = blockingProcesses.concat("Antrian#: " + String.valueOf(currentProcess.getProcessNumber()) +" \n| Nama Pasien: " + String.valueOf(currentProcess.getNama()) + " | Prioritas: " + String.valueOf(currentProcess.getPriority()) + "\n");
        }
        blockingTextArea.setText(blockingProcesses);
    }
    
    private void updateQueues(){
        
        
        int highestPriority = 10000;
        Process newRunningProcess = runningProcess;
        if(runningProcess != null){
            highestPriority = runningProcess.getPriority();
        }
        for(Iterator<Process> iterator = readyQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            int currentPriority = currentProcess.getPriority();
            if(currentPriority < highestPriority){
                newRunningProcess = currentProcess;
                highestPriority = currentPriority;
            }
        }
        for(Iterator<Process> iterator = blockingQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            int currentPriority = currentProcess.getPriority();
            if((currentPriority < highestPriority)){
                newRunningProcess = currentProcess;
                highestPriority = currentPriority;
            }
        }
        if(runningProcess != null && newRunningProcess.getProcessNumber() != runningProcess.getProcessNumber()){
            blockingQueue.add(runningProcess);
            redrawBlockingTextArea();
            runningProcess = newRunningProcess;
            boolean removed = removeFromReadyQueue(newRunningProcess.getProcessNumber());
            if(!removed){
                removeFromBlockingQueue(newRunningProcess.getProcessNumber());
            }
        } else{
            boolean removed = removeFromReadyQueue(newRunningProcess.getProcessNumber());
            if(!removed){
                removeFromBlockingQueue(newRunningProcess.getProcessNumber());
            }
            runningProcess = newRunningProcess;
        }
        runningTextArea.setText("");
        runningTextArea.append("Antrian#:" + String.valueOf(runningProcess.getProcessNumber()) +" \n| Nama Pasien: " +String.valueOf(runningProcess.getNama()) + " | Prioritas:" + String.valueOf(runningProcess.getPriority()) + "\n");
    }
    
    private void updateHistory(int contextSwitches){
        historyTextArea.append("===================================================\n");
        historyTextArea.append("Status Sistem setelah " + String.valueOf(contextSwitches) + " Lanjut Antrian.\n");
        historyTextArea.append("Sedang Diproses:\n");
        if (runningProcess !=  null){
            historyTextArea.append("Antrian#: " + String.valueOf(runningProcess.getProcessNumber()) +" \n| Nama Pasien: " + String.valueOf(runningProcess.getNama()) + " | Prioritas: " + String.valueOf(runningProcess.getPriority()) + "\n");
        }
        historyTextArea.append("\n");
        historyTextArea.append("Sedang Dalam Antrian:\n");
        for(Iterator<Process> iterator = readyQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            historyTextArea.append("Antrian#: " + String.valueOf(currentProcess.getProcessNumber()) +" \n| Nama Pasien: " + String.valueOf(runningProcess.getNama()) + " | Prioritas: " + String.valueOf(currentProcess.getPriority()) + "\n");
        }
        historyTextArea.append("\n");
        historyTextArea.append("Antrian Ditunda:\n");
        for(Iterator<Process> iterator = blockingQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            historyTextArea.append("Antrian#: " + String.valueOf(currentProcess.getProcessNumber()) +" \n| Nama Pasien: " + String.valueOf(runningProcess.getNama()) + " | Prioritas: " + String.valueOf(currentProcess.getPriority()) + "\n");
        }
        historyTextArea.append("\n");
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProcessButton;
    private javax.swing.JTextField addProcessField;
    private javax.swing.JTextArea blockingTextArea;
    private javax.swing.JButton contextSwitchButton;
    private javax.swing.JButton deleteProcessButton;
    private javax.swing.JTextField deleteProcessField;
    private javax.swing.JTextArea historyTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea readyTextArea;
    private javax.swing.JTextArea runningTextArea;
    private javax.swing.JTextField txtNamaPasien;
    // End of variables declaration//GEN-END:variables
}
